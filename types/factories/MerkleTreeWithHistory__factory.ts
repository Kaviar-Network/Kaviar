/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MerkleTreeWithHistory,
  MerkleTreeWithHistoryInterface,
} from "../MerkleTreeWithHistory";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_treeLevels",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_hasher",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract Hasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040526000600360006101000a81548163ffffffff021916908363ffffffff1602179055506000600360046101000a81548163ffffffff021916908363ffffffff1602179055503480156200005557600080fd5b50604051620015133803806200151383398181016040528101906200007b919062000500565b60008263ffffffff1611620000c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000be90620005ce565b60405180910390fd5b60208263ffffffff161062000113576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200010a9062000666565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508163ffffffff1660808163ffffffff168152505060007f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c60001b9050600281908060018154018082558091505060019003906000526020600020016000909190919091505560018190806001815401808255809150506001900390600052602060002001600090919091909150556000600190505b8363ffffffff168163ffffffff16101562000279576200020f8283620002b260201b60201c565b91506002829080600181540180825580915050600190039060005260206000200160009091909190915055600182908060018154018082558091505060019003906000526020600020016000909190919091505580806200027090620006b7565b915050620001e8565b506200028c8182620002b260201b60201c565b6004600060648110620002a457620002a3620006e9565b5b018190555050505062000967565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018360001c106200031c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003139062000768565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018260001c1062000384576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200037b9062000800565b60405180910390fd5b6000604051806040016040528085815260200184815250905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663299e5660826040518263ffffffff1660e01b8152600401620003f89190620008e7565b60206040518083038186803b1580156200041157600080fd5b505afa15801562000426573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200044c919062000935565b91505092915050565b600080fd5b600063ffffffff82169050919050565b62000475816200045a565b81146200048157600080fd5b50565b60008151905062000495816200046a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004c8826200049b565b9050919050565b620004da81620004bb565b8114620004e657600080fd5b50565b600081519050620004fa81620004cf565b92915050565b600080604083850312156200051a576200051962000455565b5b60006200052a8582860162000484565b92505060206200053d85828601620004e9565b9150509250929050565b600082825260208201905092915050565b7f5f747265654c6576656c732073686f756c64206265206772656174657220746860008201527f616e207a65726f00000000000000000000000000000000000000000000000000602082015250565b6000620005b660278362000547565b9150620005c38262000558565b604082019050919050565b60006020820190508181036000830152620005e981620005a7565b9050919050565b7f5f747265654c6576656c732073686f756c64206265206c657373207468616e2060008201527f3332000000000000000000000000000000000000000000000000000000000000602082015250565b60006200064e60228362000547565b91506200065b82620005f0565b604082019050919050565b6000602082019050818103600083015262000681816200063f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620006c4826200045a565b915063ffffffff821415620006de57620006dd62000688565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5f6c6566742073686f756c6420626520696e7369646520746865206669656c64600082015250565b60006200075060208362000547565b91506200075d8262000718565b602082019050919050565b60006020820190508181036000830152620007838162000741565b9050919050565b7f5f72696768742073686f756c6420626520696e7369646520746865206669656c60008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000620007e860218362000547565b9150620007f5826200078a565b604082019050919050565b600060208201905081810360008301526200081b81620007d9565b9050919050565b600060029050919050565b600081905092915050565b6000819050919050565b6000819050919050565b620008578162000842565b82525050565b60006200086b83836200084c565b60208301905092915050565b6000602082019050919050565b6200088f8162000822565b6200089b81846200082d565b9250620008a88262000838565b8060005b83811015620008df578151620008c387826200085d565b9650620008d08362000877565b925050600181019050620008ac565b505050505050565b6000604082019050620008fe600083018462000884565b92915050565b6200090f8162000842565b81146200091b57600080fd5b50565b6000815190506200092f8162000904565b92915050565b6000602082840312156200094e576200094d62000455565b5b60006200095e848285016200091e565b91505092915050565b608051610b906200098360003960006104710152610b906000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063c2b40ae41161008c578063ec73295911610066578063ec7329591461022a578063ed33639f14610248578063f178e47c14610266578063fc7e9c6f14610296576100cf565b8063c2b40ae4146101ac578063cd87a3b4146101dc578063e8295588146101fa576100cf565b806338bf282e146100d4578063414a37ba146101045780634ecf518b146101225780636d9833e31461014057806390eeb02b14610170578063ba70f7571461018e575b600080fd5b6100ee60048036038101906100e9919061068d565b6102b4565b6040516100fb91906106dc565b60405180910390f35b61010c61044b565b6040516101199190610710565b60405180910390f35b61012a61046f565b604051610137919061074a565b60405180910390f35b61015a60048036038101906101559190610765565b610493565b60405161016791906107ad565b60405180910390f35b610178610541565b604051610185919061074a565b60405180910390f35b610196610557565b6040516101a391906106dc565b60405180910390f35b6101c660048036038101906101c191906107f4565b61058c565b6040516101d391906106dc565b60405180910390f35b6101e46105a7565b6040516101f1919061074a565b60405180910390f35b610214600480360381019061020f91906107f4565b6105ac565b60405161022191906106dc565b60405180910390f35b6102326105d0565b60405161023f9190610710565b60405180910390f35b6102506105f4565b60405161025d91906108a0565b60405180910390f35b610280600480360381019061027b91906107f4565b610618565b60405161028d91906106dc565b60405180910390f35b61029e61063c565b6040516102ab919061074a565b60405180910390f35b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018360001c1061031b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031290610918565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018260001c10610380576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610377906109aa565b60405180910390fd5b6000604051806040016040528085815260200184815250905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663299e5660826040518263ffffffff1660e01b81526004016103f29190610a75565b60206040518083038186803b15801561040a57600080fd5b505afa15801561041e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104429190610aa5565b91505092915050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060001b8214156104a9576000905061053c565b6000600360009054906101000a900463ffffffff1690505b60048163ffffffff16606481106104db576104da610ad2565b5b01548314156104ee57600191505061053c565b60008163ffffffff16141561050257606490505b808061050d90610b30565b915050600360009054906101000a900463ffffffff1663ffffffff168163ffffffff1614156104c15760009150505b919050565b600360009054906101000a900463ffffffff1681565b60006004600360009054906101000a900463ffffffff1663ffffffff166064811061058557610584610ad2565b5b0154905090565b6004816064811061059c57600080fd5b016000915090505481565b606481565b600281815481106105bc57600080fd5b906000526020600020016000915090505481565b7f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061062857600080fd5b906000526020600020016000915090505481565b600360049054906101000a900463ffffffff1681565b600080fd5b6000819050919050565b61066a81610657565b811461067557600080fd5b50565b60008135905061068781610661565b92915050565b600080604083850312156106a4576106a3610652565b5b60006106b285828601610678565b92505060206106c385828601610678565b9150509250929050565b6106d681610657565b82525050565b60006020820190506106f160008301846106cd565b92915050565b6000819050919050565b61070a816106f7565b82525050565b60006020820190506107256000830184610701565b92915050565b600063ffffffff82169050919050565b6107448161072b565b82525050565b600060208201905061075f600083018461073b565b92915050565b60006020828403121561077b5761077a610652565b5b600061078984828501610678565b91505092915050565b60008115159050919050565b6107a781610792565b82525050565b60006020820190506107c2600083018461079e565b92915050565b6107d1816106f7565b81146107dc57600080fd5b50565b6000813590506107ee816107c8565b92915050565b60006020828403121561080a57610809610652565b5b6000610818848285016107df565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061086661086161085c84610821565b610841565b610821565b9050919050565b60006108788261084b565b9050919050565b600061088a8261086d565b9050919050565b61089a8161087f565b82525050565b60006020820190506108b56000830184610891565b92915050565b600082825260208201905092915050565b7f5f6c6566742073686f756c6420626520696e7369646520746865206669656c64600082015250565b60006109026020836108bb565b915061090d826108cc565b602082019050919050565b60006020820190508181036000830152610931816108f5565b9050919050565b7f5f72696768742073686f756c6420626520696e7369646520746865206669656c60008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b60006109946021836108bb565b915061099f82610938565b604082019050919050565b600060208201905081810360008301526109c381610987565b9050919050565b600060029050919050565b600081905092915050565b6000819050919050565b6109f381610657565b82525050565b6000610a0583836109ea565b60208301905092915050565b6000602082019050919050565b610a27816109ca565b610a3181846109d5565b9250610a3c826109e0565b8060005b83811015610a6d578151610a5487826109f9565b9650610a5f83610a11565b925050600181019050610a40565b505050505050565b6000604082019050610a8a6000830184610a1e565b92915050565b600081519050610a9f81610661565b92915050565b600060208284031215610abb57610aba610652565b5b6000610ac984828501610a90565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b3b8261072b565b91506000821415610b4f57610b4e610b01565b5b60018203905091905056fea2646970667358221220d9f21e4e3417c4a65390007cbc3b0fcc3ccdc574a852bbd21bb1e1c7a544232964736f6c63430008090033";

export class MerkleTreeWithHistory__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _treeLevels: BigNumberish,
    _hasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleTreeWithHistory> {
    return super.deploy(
      _treeLevels,
      _hasher,
      overrides || {}
    ) as Promise<MerkleTreeWithHistory>;
  }
  getDeployTransaction(
    _treeLevels: BigNumberish,
    _hasher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_treeLevels, _hasher, overrides || {});
  }
  attach(address: string): MerkleTreeWithHistory {
    return super.attach(address) as MerkleTreeWithHistory;
  }
  connect(signer: Signer): MerkleTreeWithHistory__factory {
    return super.connect(signer) as MerkleTreeWithHistory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeWithHistoryInterface {
    return new utils.Interface(_abi) as MerkleTreeWithHistoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTreeWithHistory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MerkleTreeWithHistory;
  }
}
